diff --git a/internal/ui/toolbars.go b/internal/ui/toolbars.go
index dab71f0..f932281 100644
--- a/internal/ui/toolbars.go
+++ b/internal/ui/toolbars.go
@@ -55,11 +55,19 @@ func (p *PicsortUI) topBar() *fyne.Container {
 	)
 }
 
-func (p *PicsortUI) dbinit(path string) {
+func (p *PicsortUI) loadThumbnails(path string) {
+	fyne.Do(func() {
+		p.progressTitle.SetText("Hang on, this may take a while...")
+		p.progressDialog.Show()
+		p.progress.Show()
+		p.progressValue.Set(0)
+		p.imagePaths = []string{}
+		p.thumbCache = make(map[string]image.Image) // Reset in-memory cache
+	})
+
 	if p.db != nil {
 		p.db.Close()
 	}
-
 	db, err := database.New(path)
 	if err != nil {
 		log.Println("error opening database:", err)
@@ -70,102 +78,109 @@ func (p *PicsortUI) dbinit(path string) {
 		return
 	}
 	p.db = db
-}
-
-func (p *PicsortUI) showErrorDialog(err error) {
-	log.Println("error loading dataset:", err)
-	fyne.Do(func() {
-		p.progressDialog.Hide()
-		dialog.ShowError(err, p.win)
-	})
-}
-
-func (p *PicsortUI) showProgressDialog(msg string) {
-	fyne.Do(func() {
-		p.progressTitle.SetText(msg)
-		p.progressDialog.Show()
-		p.progress.Show()
-		p.progressValue.Set(0)
-		p.imagePaths = []string{}
-		p.thumbCache = make(map[string]image.Image)
-	})
-}
-
-func (p *PicsortUI) setProgress(progress float64, f string) {
-	fyne.Do(func() {
-		p.progressFile.SetText(f)
-		p.progressValue.Set(progress)
-	})
-}
-
-func (p *PicsortUI) cacheThumbnails(total float64, processedCount *int64) {
-	defer p.wg.Done()
-	for imgPath := range p.jobs {
-		atomic.AddInt64(processedCount, 1)
-		progress := float64(atomic.LoadInt64(processedCount)) / total
-		p.setProgress(progress, filepath.Base(imgPath))
-		if _, found := p.db.GetThumbnail(imgPath); found {
-			continue
-		}
 
-		file, err := os.Open(imgPath)
-		if err != nil {
-			log.Printf("could not open file %s: %v", imgPath, err)
-			continue
-		}
+	d, err := data.NewDataset(path)
+	if err != nil {
+		log.Println("error loading dataset:", err)
+		fyne.Do(func() {
+			dialog.ShowError(err, p.win)
+			p.progressDialog.Hide()
+		})
+		return
+	}
 
-		img, _, err := image.Decode(file)
-		file.Close()
-		if err != nil {
-			log.Printf("could not decode image %s: %v", imgPath, err)
-			continue
+	imagePaths := d.Images
+	total := float64(len(imagePaths))
+	var processedCount int64
+	var pathsToProcess []string
+	var cachedCount int64
+	for _, imgPath := range imagePaths {
+		thumb, found := p.db.GetThumbnail(imgPath)
+		if found {
+			p.thumbCache[imgPath] = thumb
+			cachedCount++
+		} else {
+			pathsToProcess = append(pathsToProcess, imgPath)
 		}
 
-		thumb := resize.Thumbnail(200, 200, img, resize.Lanczos3)
-		p.thumbMutex.Lock()
-		p.thumbCache[imgPath] = thumb
-		p.thumbMutex.Unlock()
 	}
-}
 
-func (p *PicsortUI) loadThumbnails(path string) {
-	p.showProgressDialog("Hang on, this may take a while...")
-	p.dbinit(path)
+	atomic.StoreInt64(&processedCount, cachedCount)
+	fyne.Do(func() {
+		p.progressValue.Set(float64(cachedCount) / total)
+	})
 
-	d, err := data.NewDataset(path)
-	if err != nil {
-		p.showErrorDialog(err)
+	// If all images are cached, we can finish early
+	if len(pathsToProcess) == 0 {
+		fyne.Do(func() {
+			p.imagePaths = imagePaths
+			p.thumbnails.Refresh()
+			p.progressDialog.Hide()
+		})
 		return
 	}
 
-	p.imagePaths = d.Images
-	total := float64(len(p.imagePaths))
-	var processedCount int64
-
-	p.jobs = make(chan string, len(p.imagePaths))
-	for _, path := range p.imagePaths {
-		p.jobs <- path
+	jobs := make(chan string, len(pathsToProcess))
+	for _, path := range pathsToProcess {
+		jobs <- path
 	}
-	close(p.jobs)
+	close(jobs)
 
-	p.thumbMutex = &sync.Mutex{}
-	p.wg = &sync.WaitGroup{}
+	newThumbnailsForDB := make(map[string]image.Image)
+	var thumbMutex sync.Mutex
+	var wg sync.WaitGroup
 	numWorkers := runtime.NumCPU()
-	p.wg.Add(numWorkers)
-
-	for range numWorkers {
-		go p.cacheThumbnails(total, &processedCount)
+	wg.Add(numWorkers)
+
+	for i := 0; i < numWorkers; i++ {
+		go func() {
+			defer wg.Done()
+			for imgPath := range jobs {
+				fyne.Do(func() {
+					p.progressFile.SetText(filepath.Base(imgPath))
+				})
+
+				file, err := os.Open(imgPath)
+				if err != nil {
+					log.Printf("could not open file %s: %v", imgPath, err)
+					continue
+				}
+
+				img, _, err := image.Decode(file)
+				file.Close()
+				if err != nil {
+					log.Printf("could not decode image %s: %v", imgPath, err)
+					continue
+				}
+
+				thumb := resize.Thumbnail(200, 200, img, resize.Lanczos3)
+				thumbMutex.Lock()
+				p.thumbCache[imgPath] = thumb
+				newThumbnailsForDB[imgPath] = thumb
+				thumbMutex.Unlock()
+
+				atomic.AddInt64(&processedCount, 1)
+				progress := float64(atomic.LoadInt64(&processedCount)) / total
+				fyne.Do(func() {
+					p.progressValue.Set(progress)
+				})
+			}
+		}()
 	}
 
-	p.wg.Wait()
+	wg.Wait()
 
-	if len(p.thumbCache) > 0 {
-		if err := p.db.SetThumbnailsBatch(p.thumbCache); err != nil {
+	if len(newThumbnailsForDB) > 0 {
+		log.Printf("Writing %d new thumbnails to the database...", len(newThumbnailsForDB))
+		if err := p.db.SetThumbnailsBatch(newThumbnailsForDB); err != nil {
 			log.Printf("Error during batch thumbnail write: %v", err)
+		} else {
+			log.Println("Batch write complete.")
 		}
 	}
 
 	fyne.Do(func() {
+		p.imagePaths = imagePaths
 		p.thumbnails.Refresh()
 		p.progressDialog.Hide()
 	})
diff --git a/internal/ui/ui.go b/internal/ui/ui.go
index 5a0c72a..5bbd999 100644
--- a/internal/ui/ui.go
+++ b/internal/ui/ui.go
@@ -3,7 +3,6 @@ package ui
 import (
 	"fmt"
 	"image"
-	"sync"
 
 	"fyne.io/fyne/v2"
 	"fyne.io/fyne/v2/canvas"
@@ -29,9 +28,6 @@ type PicsortUI struct {
 	progressTitle  *widget.Label
 	progressFile   *widget.Label
 	progressDialog dialog.Dialog
-	wg             *sync.WaitGroup
-	jobs           chan string
-	thumbMutex     *sync.Mutex
 }
 
 func New(a fyne.App, w fyne.Window) *PicsortUI {
@@ -42,7 +38,6 @@ func New(a fyne.App, w fyne.Window) *PicsortUI {
 		progressValue: binding.NewFloat(),
 		progressTitle: widget.NewLabel(""),
 		progressFile:  widget.NewLabel(""),
-		thumbMutex:    &sync.Mutex{},
 	}
 }
 
